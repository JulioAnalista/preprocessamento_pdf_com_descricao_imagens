#!/usr/bin/env python3
"""
Teste LangExtract com Azure OpenAI - Processo 07624573620258070016
Com m√©tricas detalhadas e compara√ß√£o com processos anteriores.
"""

import os
import sys
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
from dataclasses import dataclass
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Importar LangExtract
import langextract as lx

@dataclass
class MetricaTempo:
    """Classe para armazenar m√©tricas de tempo."""
    nome: str
    inicio: float
    fim: float = 0.0
    duracao: float = 0.0
    
    def finalizar(self):
        """Finaliza a medi√ß√£o de tempo."""
        self.fim = time.time()
        self.duracao = self.fim - self.inicio
        return self.duracao

class MedidorPerformanceCompleto:
    """Classe para medir performance detalhada com compara√ß√µes."""
    
    def __init__(self, processo_numero: str):
        self.processo_numero = processo_numero
        self.metricas: List[MetricaTempo] = []
        self.inicio_total = time.time()
        self.dados_processo = {}
        self.inicio_tarefa_completa = time.time()  # Para medir tempo total da tarefa
    
    def iniciar_metrica(self, nome: str) -> MetricaTempo:
        """Inicia uma nova m√©trica de tempo."""
        metrica = MetricaTempo(nome=nome, inicio=time.time())
        self.metricas.append(metrica)
        print(f"‚è±Ô∏è  Iniciando: {nome}")
        return metrica
    
    def finalizar_metrica(self, metrica: MetricaTempo):
        """Finaliza uma m√©trica de tempo."""
        duracao = metrica.finalizar()
        print(f"‚úÖ Conclu√≠do: {metrica.nome} - {duracao:.2f}s")
        return duracao
    
    def tempo_total(self) -> float:
        """Calcula o tempo total decorrido."""
        return time.time() - self.inicio_total
    
    def tempo_tarefa_completa(self) -> float:
        """Calcula o tempo total da tarefa completa."""
        return time.time() - self.inicio_tarefa_completa
    
    def relatorio_performance(self) -> Dict[str, Any]:
        """Gera relat√≥rio completo de performance."""
        tempo_total = self.tempo_total()
        tempo_tarefa = self.tempo_tarefa_completa()
        
        relatorio = {
            'processo_numero': self.processo_numero,
            'tempo_total_segundos': tempo_total,
            'tempo_total_formatado': str(timedelta(seconds=int(tempo_total))),
            'tempo_tarefa_completa_segundos': tempo_tarefa,
            'tempo_tarefa_completa_formatado': str(timedelta(seconds=int(tempo_tarefa))),
            'inicio_processamento': datetime.fromtimestamp(self.inicio_total).strftime('%H:%M:%S'),
            'fim_processamento': datetime.now().strftime('%H:%M:%S'),
            'inicio_tarefa': datetime.fromtimestamp(self.inicio_tarefa_completa).strftime('%H:%M:%S'),
            'metricas_detalhadas': []
        }
        
        for metrica in self.metricas:
            if metrica.duracao > 0:
                relatorio['metricas_detalhadas'].append({
                    'etapa': metrica.nome,
                    'duracao_segundos': metrica.duracao,
                    'duracao_formatada': f"{metrica.duracao:.2f}s",
                    'percentual_tempo_total': (metrica.duracao / tempo_total) * 100
                })
        
        # Adicionar dados do processo
        relatorio.update(self.dados_processo)
        
        return relatorio

def carregar_texto_processo(medidor: MedidorPerformanceCompleto) -> str:
    """Carrega o texto do processo jur√≠dico com medi√ß√£o de tempo."""
    metrica = medidor.iniciar_metrica("Carregamento do arquivo")
    
    caminho_arquivo = "docs/examples/processos/07624573620258070016/processo_07624573620258070016.md"
    
    try:
        with open(caminho_arquivo, 'r', encoding='utf-8') as f:
            texto = f.read()
        
        # Armazenar dados do processo
        medidor.dados_processo.update({
            'arquivo': caminho_arquivo,
            'tamanho_caracteres': len(texto),
            'tamanho_linhas': texto.count('\n') + 1,
            'tamanho_kb': len(texto.encode('utf-8')) / 1024
        })
        
        print(f"üìÑ Arquivo carregado: {len(texto):,} caracteres ({len(texto.encode('utf-8'))/1024:.1f} KB)")
        medidor.finalizar_metrica(metrica)
        return texto
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar arquivo: {e}")
        medidor.finalizar_metrica(metrica)
        return None

def criar_exemplos_juridicos_processo3(medidor: MedidorPerformanceCompleto) -> List:
    """Cria exemplos otimizados para o terceiro processo (viol√™ncia contra menor)."""
    metrica = medidor.iniciar_metrica("Cria√ß√£o de exemplos")
    
    exemplos = [
        lx.data.ExampleData(
            text="RAISSA DOS SANTOS, natural de PLANALTINA - GO, nascida em 17/12/1997, com 27 anos, RG 3662605 SSP/DF, CPF 070.416.951-74, endere√ßo QR 05, CJ A, LOTE 07, BURITIZINHO - SOBRADINHO II, DF.",
            extractions=[
                lx.data.Extraction(
                    extraction_class="pessoa",
                    extraction_text="RAISSA DOS SANTOS",
                    attributes={
                        "nome": "RAISSA DOS SANTOS",
                        "naturalidade": "PLANALTINA - GO",
                        "data_nascimento": "17/12/1997",
                        "idade": "27 anos",
                        "rg": "3662605",
                        "orgao_expedidor": "SSP/DF",
                        "cpf": "070.416.951-74",
                        "endereco": "QR 05, CJ A, LOTE 07, BURITIZINHO - SOBRADINHO II, DF",
                        "papel": "comunicante"
                    }
                )
            ]
        ),
        lx.data.ExampleData(
            text="Ocorr√™ncia 3673/2025-35¬™ DP, Protocolo 1744347/2025, Delegado RAFAEL LAURE MIRANDA, Escriv√£o ALEX YUZO MOROGUMA.",
            extractions=[
                lx.data.Extraction(
                    extraction_class="ocorrencia",
                    extraction_text="3673/2025-35¬™ DP",
                    attributes={
                        "numero": "3673/2025",
                        "delegacia": "35¬™ DP"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="protocolo",
                    extraction_text="1744347/2025",
                    attributes={
                        "numero": "1744347/2025"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="autoridade",
                    extraction_text="RAFAEL LAURE MIRANDA",
                    attributes={
                        "nome": "RAFAEL LAURE MIRANDA",
                        "cargo": "Delegado de Pol√≠cia"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="autoridade",
                    extraction_text="ALEX YUZO MOROGUMA",
                    attributes={
                        "nome": "ALEX YUZO MOROGUMA",
                        "cargo": "Escriv√£o de Pol√≠cia",
                        "matricula": "0230676X"
                    }
                )
            ]
        ),
        lx.data.ExampleData(
            text="KYARA DOS SANTOS, menor de idade, v√≠tima de viol√™ncia dom√©stica praticada por MARIA DO PERP√âTUO SOCORRO VER√çSSIMO DOS SANTOS, sua genitora.",
            extractions=[
                lx.data.Extraction(
                    extraction_class="pessoa",
                    extraction_text="KYARA DOS SANTOS",
                    attributes={
                        "nome": "KYARA DOS SANTOS",
                        "idade": "menor de idade",
                        "papel": "v√≠tima"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="pessoa",
                    extraction_text="MARIA DO PERP√âTUO SOCORRO VER√çSSIMO DOS SANTOS",
                    attributes={
                        "nome": "MARIA DO PERP√âTUO SOCORRO VER√çSSIMO DOS SANTOS",
                        "papel": "autora",
                        "relacao": "genitora"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="crime",
                    extraction_text="viol√™ncia dom√©stica",
                    attributes={
                        "tipo": "viol√™ncia dom√©stica",
                        "contexto": "contra menor de idade"
                    }
                )
            ]
        )
    ]
    
    medidor.finalizar_metrica(metrica)
    return exemplos

def extrair_dados_processo3_otimizado(texto: str, medidor: MedidorPerformanceCompleto):
    """Extrai dados do terceiro processo com configura√ß√µes otimizadas."""
    metrica_total = medidor.iniciar_metrica("Extra√ß√£o completa (LangExtract)")
    
    print("üîç Iniciando extra√ß√£o otimizada do terceiro processo jur√≠dico...")
    
    # Prompt otimizado para o terceiro processo (viol√™ncia contra menor)
    prompt = """
    Extrair informa√ß√µes estruturadas de processo jur√≠dico de viol√™ncia dom√©stica contra menor incluindo:
    
    PESSOAS ENVOLVIDAS:
    - Nome completo, CPF, RG, data de nascimento, endere√ßo
    - Papel no processo (v√≠tima, comunicante, autor, autoridade)
    - Dados familiares (pai, m√£e, irm√£os, relacionamentos)
    - Profiss√£o, estado civil, naturalidade, idade
    - Situa√ß√£o de menores de idade
    
    DADOS PROCESSUAIS:
    - N√∫mero do processo, ocorr√™ncia, protocolo
    - Delegacia, vara, juizado respons√°vel
    - Datas importantes (declara√ß√µes, comunica√ß√µes, decis√µes)
    - Tipo de procedimento (termo de declara√ß√£o, medida protetiva)
    - Mandados e intima√ß√µes
    
    CRIMES E COMPORTAMENTOS:
    - Viol√™ncia f√≠sica contra menor
    - Maus-tratos e agress√µes
    - Viol√™ncia verbal e psicol√≥gica
    - Ambiente familiar hostil
    - Padr√µes de comportamento abusivo
    
    AUTORIDADES E FUNCION√ÅRIOS:
    - Delegados, escriv√£es, promotores
    - Conselheiros tutelares
    - Oficiais de justi√ßa
    - Matr√≠cula e fun√ß√£o espec√≠fica
    
    MEDIDAS PROTETIVAS:
    - Medidas solicitadas e deferidas
    - Afastamento do agressor
    - Prote√ß√£o de menor de idade
    - Acolhimento familiar
    
    CONSELHO TUTELAR:
    - Interven√ß√£o do Conselho Tutelar
    - Conselheiros envolvidos
    - Encaminhamentos realizados
    
    COMUNICA√á√ïES E MENSAGENS:
    - Mensagens de texto ou WhatsApp
    - Conte√∫do das comunica√ß√µes
    - Relatos de viol√™ncia
    - Contatos telef√¥nicos
    
    CONTEXTO FAMILIAR:
    - Estrutura familiar
    - Relacionamentos entre membros
    - Hist√≥rico de viol√™ncia
    - Ambiente dom√©stico
    """
    
    # Criar exemplos otimizados
    metrica_exemplos = medidor.iniciar_metrica("Prepara√ß√£o de exemplos")
    exemplos = criar_exemplos_juridicos_processo3(medidor)
    medidor.finalizar_metrica(metrica_exemplos)
    
    try:
        # Configura√ß√µes otimizadas baseadas nos testes anteriores
        metrica_langextract = medidor.iniciar_metrica("Chamada LangExtract API")
        
        resultado = lx.extract(
            text_or_documents=texto,
            prompt_description=prompt,
            examples=exemplos,
            model_id='gpt-5-nano',  # Azure OpenAI
            max_char_buffer=1600,   # Chunks ainda menores para melhor performance
            batch_length=15,        # Lotes maiores
            extraction_passes=2,    # M√∫ltiplas passadas
            max_workers=18          # Mais paraleliza√ß√£o
        )
        
        medidor.finalizar_metrica(metrica_langextract)
        
        # Armazenar dados da extra√ß√£o
        medidor.dados_processo.update({
            'total_extractions': len(resultado.extractions),
            'chunks_processados': medidor.dados_processo['tamanho_caracteres'] // 1600 + 1,
            'velocidade_chars_por_segundo': medidor.dados_processo['tamanho_caracteres'] / metrica_langextract.duracao
        })
        
        print(f"‚úÖ Extra√ß√£o conclu√≠da: {len(resultado.extractions)} extra√ß√µes encontradas")
        medidor.finalizar_metrica(metrica_total)
        return resultado
        
    except Exception as e:
        print(f"‚ùå Erro na extra√ß√£o: {e}")
        medidor.finalizar_metrica(metrica_langextract)
        medidor.finalizar_metrica(metrica_total)
        return None

def salvar_resultados_com_metricas_completas(resultado, medidor: MedidorPerformanceCompleto, diretorio_output: str):
    """Salva resultados e m√©tricas de performance completas."""
    metrica = medidor.iniciar_metrica("Salvamento de resultados")
    
    # Criar diret√≥rio
    os.makedirs(diretorio_output, exist_ok=True)
    
    # Salvar dados estruturados
    arquivo_jsonl = os.path.join(diretorio_output, "extractions.jsonl")
    lx.io.save_annotated_documents([resultado], output_name="extractions.jsonl", output_dir=diretorio_output)
    print(f"‚úÖ Dados salvos em: {arquivo_jsonl}")
    
    # Gerar visualiza√ß√£o HTML
    try:
        metrica_viz = medidor.iniciar_metrica("Gera√ß√£o de visualiza√ß√£o HTML")
        html_content = lx.visualize(arquivo_jsonl, animation_speed=1.0, show_legend=True)
        arquivo_html = os.path.join(diretorio_output, "visualizacao_processo.html")
        
        with open(arquivo_html, 'w', encoding='utf-8') as f:
            if hasattr(html_content, 'data'):
                f.write(html_content.data)
            else:
                f.write(html_content)
        
        medidor.finalizar_metrica(metrica_viz)
        print(f"‚úÖ Visualiza√ß√£o salva em: {arquivo_html}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar visualiza√ß√£o: {e}")
    
    # Salvar relat√≥rio de performance
    relatorio_performance = medidor.relatorio_performance()
    arquivo_performance = os.path.join(diretorio_output, "metricas_performance.json")
    
    with open(arquivo_performance, 'w', encoding='utf-8') as f:
        json.dump(relatorio_performance, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ M√©tricas salvas em: {arquivo_performance}")
    
    # Salvar relat√≥rio em texto
    arquivo_relatorio = os.path.join(diretorio_output, "relatorio_extractions.txt")
    gerar_relatorio_texto_completo(resultado, relatorio_performance, arquivo_relatorio)
    print(f"‚úÖ Relat√≥rio salvo em: {arquivo_relatorio}")
    
    medidor.finalizar_metrica(metrica)

def gerar_relatorio_texto_completo(resultado, metricas: Dict, arquivo_relatorio: str):
    """Gera relat√≥rio em texto com m√©tricas completas."""
    
    with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
        f.write("RELAT√ìRIO DE EXTRA√á√ÉO COM M√âTRICAS COMPLETAS - PROCESSO JUR√çDICO\n")
        f.write("=" * 70 + "\n\n")
        f.write(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        f.write(f"Processo: {metricas['processo_numero']}\n")
        f.write(f"Total de extra√ß√µes: {len(resultado.extractions)}\n\n")
        
        # Se√ß√£o de m√©tricas de performance
        f.write("M√âTRICAS DE PERFORMANCE COMPLETAS\n")
        f.write("-" * 40 + "\n")
        f.write(f"Tempo total processamento: {metricas['tempo_total_formatado']}\n")
        f.write(f"Tempo total da tarefa: {metricas['tempo_tarefa_completa_formatado']}\n")
        f.write(f"In√≠cio tarefa: {metricas['inicio_tarefa']}\n")
        f.write(f"In√≠cio processamento: {metricas['inicio_processamento']}\n")
        f.write(f"Fim: {metricas['fim_processamento']}\n")
        f.write(f"Tamanho do arquivo: {metricas['tamanho_caracteres']:,} caracteres ({metricas['tamanho_kb']:.1f} KB)\n")
        f.write(f"Chunks processados: {metricas.get('chunks_processados', 'N/A')}\n")
        f.write(f"Velocidade: {metricas.get('velocidade_chars_por_segundo', 0):.1f} chars/segundo\n\n")
        
        # M√©tricas detalhadas por etapa
        f.write("TEMPO POR ETAPA\n")
        f.write("-" * 30 + "\n")
        for metrica in metricas['metricas_detalhadas']:
            f.write(f"{metrica['etapa']}: {metrica['duracao_formatada']} ({metrica['percentual_tempo_total']:.1f}%)\n")
        f.write("\n")
        
        # Agrupar extra√ß√µes por classe
        extractions_por_classe = {}
        for extraction in resultado.extractions:
            classe = extraction.extraction_class
            if classe not in extractions_por_classe:
                extractions_por_classe[classe] = []
            extractions_por_classe[classe].append(extraction)
        
        # Estat√≠sticas por categoria
        f.write("ESTAT√çSTICAS POR CATEGORIA\n")
        f.write("-" * 30 + "\n")
        for classe, extractions in sorted(extractions_por_classe.items()):
            f.write(f"{classe}: {len(extractions)} extra√ß√µes\n")
        f.write(f"\nTOTAL DE CATEGORIAS: {len(extractions_por_classe)}\n\n")
        
        # Escrever extra√ß√µes por categoria
        for classe, extractions in sorted(extractions_por_classe.items()):
            f.write(f"\n{classe.upper()}\n")
            f.write("-" * 40 + "\n")
            
            for i, extraction in enumerate(extractions, 1):
                f.write(f"\n{i}. {extraction.extraction_text}\n")
                
                if extraction.attributes:
                    for key, value in extraction.attributes.items():
                        f.write(f"   ‚Ä¢ {key}: {value}\n")
                
                if extraction.char_interval:
                    start = extraction.char_interval.start_pos
                    end = extraction.char_interval.end_pos
                    f.write(f"   ‚Ä¢ Posi√ß√£o no texto: {start}-{end}\n")
                
                f.write(f"   ‚Ä¢ Status alinhamento: {extraction.alignment_status}\n")

def exibir_metricas_tempo_real_completas(medidor: MedidorPerformanceCompleto):
    """Exibe m√©tricas completas em tempo real."""
    relatorio = medidor.relatorio_performance()
    
    print("\n" + "=" * 80)
    print("üìä M√âTRICAS DE PERFORMANCE COMPLETAS EM TEMPO REAL")
    print("=" * 80)
    
    print(f"üìã Processo: {relatorio['processo_numero']}")
    print(f"‚è±Ô∏è  Tempo total da tarefa: {relatorio['tempo_tarefa_completa_formatado']}")
    print(f"‚è±Ô∏è  Tempo processamento: {relatorio['tempo_total_formatado']}")
    print(f"üìÑ Arquivo: {relatorio['tamanho_caracteres']:,} caracteres ({relatorio['tamanho_kb']:.1f} KB)")
    print(f"üîç Extra√ß√µes: {relatorio.get('total_extractions', 'Processando...')}")
    print(f"‚ö° Velocidade: {relatorio.get('velocidade_chars_por_segundo', 0):.1f} chars/segundo")
    
    print(f"\nüìà TEMPO POR ETAPA:")
    for metrica in relatorio['metricas_detalhadas']:
        print(f"  ‚Ä¢ {metrica['etapa']}: {metrica['duracao_formatada']} ({metrica['percentual_tempo_total']:.1f}%)")

def main():
    """Fun√ß√£o principal com medi√ß√£o completa de performance."""
    
    print("TESTE LANGEXTRACT COM AZURE OPENAI - PROCESSO 3 + M√âTRICAS COMPLETAS")
    print("Processo: 07624573620258070016")
    print("=" * 80)
    
    # Inicializar medidor de performance
    medidor = MedidorPerformanceCompleto("07624573620258070016")
    
    # Verificar configura√ß√£o
    metrica_config = medidor.iniciar_metrica("Verifica√ß√£o de configura√ß√£o")
    required_vars = ['AZURE_OPENAI_API_KEY', 'AZURE_OPENAI_ENDPOINT']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente faltando: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ Configura√ß√£o Azure OpenAI encontrada")
    print(f"   Endpoint: {os.getenv('AZURE_OPENAI_ENDPOINT')}")
    medidor.finalizar_metrica(metrica_config)
    
    # Carregar texto do processo
    texto_processo = carregar_texto_processo(medidor)
    if not texto_processo:
        return False
    
    # Extrair dados com m√©tricas
    resultado = extrair_dados_processo3_otimizado(texto_processo, medidor)
    if not resultado:
        return False
    
    # Exibir m√©tricas em tempo real
    exibir_metricas_tempo_real_completas(medidor)
    
    # Salvar resultados com m√©tricas
    diretorio_output = "docs/examples/processos/07624573620258070016/output"
    salvar_resultados_com_metricas_completas(resultado, medidor, diretorio_output)
    
    # Relat√≥rio final
    tempo_total_tarefa = medidor.tempo_tarefa_completa()
    tempo_processamento = medidor.tempo_total()
    
    print("\n" + "=" * 80)
    print("üéâ TESTE PROCESSO 3 CONCLU√çDO COM SUCESSO!")
    print("=" * 80)
    print(f"‚è±Ô∏è  Tempo total da tarefa: {str(timedelta(seconds=int(tempo_total_tarefa)))}")
    print(f"‚è±Ô∏è  Tempo processamento: {str(timedelta(seconds=int(tempo_processamento)))}")
    print(f"üìä Total de extra√ß√µes: {len(resultado.extractions)}")
    print(f"‚ö° Performance: {len(texto_processo)/tempo_processamento:.1f} chars/segundo")
    print(f"üìÅ Resultados salvos em: {diretorio_output}")
    
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
