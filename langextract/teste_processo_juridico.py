#!/usr/bin/env python3
"""
Teste completo do LangExtract com Azure OpenAI em processo jur√≠dico.
Extrai informa√ß√µes estruturadas do processo 07059645120258070012.
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Importar LangExtract
import langextract as lx

def carregar_texto_processo():
    """Carrega o texto do processo jur√≠dico."""
    caminho_arquivo = "docs/examples/processos/07059645120258070012/processo_07059645120258070012.md"
    
    try:
        with open(caminho_arquivo, 'r', encoding='utf-8') as f:
            texto = f.read()
        print(f"‚úÖ Arquivo carregado: {len(texto)} caracteres")
        return texto
    except FileNotFoundError:
        print(f"‚ùå Arquivo n√£o encontrado: {caminho_arquivo}")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao carregar arquivo: {e}")
        return None

def criar_exemplos_juridicos():
    """Cria exemplos para guiar a extra√ß√£o de dados jur√≠dicos."""
    
    exemplos = [
        lx.data.ExampleData(
            text="Jo√£o Silva, CPF 123.456.789-00, nascido em 01/01/1980, residente na Rua A, 123, foi v√≠tima de amea√ßa praticada por Maria Santos em 15/03/2023.",
            extractions=[
                lx.data.Extraction(
                    extraction_class="pessoa",
                    extraction_text="Jo√£o Silva",
                    attributes={
                        "nome": "Jo√£o Silva",
                        "cpf": "123.456.789-00",
                        "data_nascimento": "01/01/1980",
                        "endereco": "Rua A, 123",
                        "papel": "v√≠tima"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="pessoa",
                    extraction_text="Maria Santos",
                    attributes={
                        "nome": "Maria Santos",
                        "papel": "autora"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="crime",
                    extraction_text="amea√ßa",
                    attributes={
                        "tipo": "amea√ßa",
                        "data": "15/03/2023"
                    }
                )
            ]
        ),
        lx.data.ExampleData(
            text="Processo n¬∫ 1234567-89.2023.8.07.0001 da 1¬™ Vara Criminal de Bras√≠lia. Delegacia: 5¬™ DP. Inqu√©rito 456/2023.",
            extractions=[
                lx.data.Extraction(
                    extraction_class="processo",
                    extraction_text="1234567-89.2023.8.07.0001",
                    attributes={
                        "numero": "1234567-89.2023.8.07.0001",
                        "vara": "1¬™ Vara Criminal de Bras√≠lia"
                    }
                ),
                lx.data.Extraction(
                    extraction_class="procedimento",
                    extraction_text="Inqu√©rito 456/2023",
                    attributes={
                        "tipo": "Inqu√©rito",
                        "numero": "456/2023",
                        "delegacia": "5¬™ DP"
                    }
                )
            ]
        )
    ]
    
    return exemplos

def extrair_dados_processo(texto):
    """Extrai dados estruturados do processo jur√≠dico."""
    
    print("üîç Iniciando extra√ß√£o de dados do processo jur√≠dico...")
    
    # Prompt detalhado para extra√ß√£o jur√≠dica
    prompt = """
    Extrair informa√ß√µes estruturadas de processo jur√≠dico incluindo:
    
    PESSOAS ENVOLVIDAS:
    - Nome completo, CPF, RG, data de nascimento, endere√ßo
    - Papel no processo (v√≠tima, autor, testemunha, autoridade)
    - Dados familiares (pai, m√£e, filhos)
    
    DADOS PROCESSUAIS:
    - N√∫mero do processo, ocorr√™ncia, protocolo
    - Delegacia, vara, juizado respons√°vel
    - Datas importantes (fatos, comunica√ß√£o, decis√µes)
    - Tipo de procedimento (inqu√©rito, medida protetiva, etc.)
    
    CRIMES E INFRA√á√ïES:
    - Tipos de crime (amea√ßa, inj√∫ria, difama√ß√£o, etc.)
    - Lei aplic√°vel (Lei Maria da Penha, C√≥digo Penal)
    - Circunst√¢ncias e local dos fatos
    
    AUTORIDADES:
    - Delegados, escriv√£es, promotores, ju√≠zes
    - Matr√≠cula e fun√ß√£o
    
    MEDIDAS E DECIS√ïES:
    - Medidas protetivas solicitadas e deferidas
    - Despachos e decis√µes judiciais
    - Encaminhamentos (Conselho Tutelar, MP, etc.)
    
    MENORES ENVOLVIDOS:
    - Nomes, idades, situa√ß√£o de risco
    - Medidas de prote√ß√£o espec√≠ficas
    """
    
    # Exemplos para guiar o modelo
    exemplos = criar_exemplos_juridicos()
    
    try:
        # Executar extra√ß√£o com Azure OpenAI
        resultado = lx.extract(
            text_or_documents=texto,
            prompt_description=prompt,
            examples=exemplos,
            model_id='gpt-5-nano',  # Usa Azure OpenAI automaticamente
            max_char_buffer=2000,   # Chunks maiores para contexto jur√≠dico
            batch_length=10,        # Processamento em lotes
            extraction_passes=2     # M√∫ltiplas passadas para melhor recall
            # Nota: gpt-5-nano s√≥ suporta temperature padr√£o (1.0)
        )
        
        print(f"‚úÖ Extra√ß√£o conclu√≠da: {len(resultado.extractions)} extra√ß√µes encontradas")
        return resultado
        
    except Exception as e:
        print(f"‚ùå Erro na extra√ß√£o: {e}")
        return None

def salvar_resultados(resultado, diretorio_output):
    """Salva os resultados da extra√ß√£o."""
    
    # Criar diret√≥rio se n√£o existir
    os.makedirs(diretorio_output, exist_ok=True)
    
    # Salvar dados estruturados
    arquivo_jsonl = os.path.join(diretorio_output, "extractions.jsonl")
    lx.io.save_annotated_documents([resultado], output_name="extractions.jsonl", output_dir=diretorio_output)
    print(f"‚úÖ Dados salvos em: {arquivo_jsonl}")
    
    # Gerar visualiza√ß√£o HTML
    try:
        html_content = lx.visualize(arquivo_jsonl, animation_speed=1.5, show_legend=True)
        arquivo_html = os.path.join(diretorio_output, "visualizacao_processo.html")
        
        with open(arquivo_html, 'w', encoding='utf-8') as f:
            if hasattr(html_content, 'data'):
                f.write(html_content.data)
            else:
                f.write(html_content)
        
        print(f"‚úÖ Visualiza√ß√£o salva em: {arquivo_html}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar visualiza√ß√£o: {e}")
    
    # Salvar relat√≥rio em texto
    arquivo_relatorio = os.path.join(diretorio_output, "relatorio_extractions.txt")
    gerar_relatorio_texto(resultado, arquivo_relatorio)
    print(f"‚úÖ Relat√≥rio salvo em: {arquivo_relatorio}")

def gerar_relatorio_texto(resultado, arquivo_relatorio):
    """Gera relat√≥rio em texto das extra√ß√µes."""
    
    with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
        f.write("RELAT√ìRIO DE EXTRA√á√ÉO - PROCESSO JUR√çDICO\n")
        f.write("=" * 50 + "\n\n")
        f.write(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        f.write(f"Processo: 07059645120258070012\n")
        f.write(f"Total de extra√ß√µes: {len(resultado.extractions)}\n\n")
        
        # Agrupar extra√ß√µes por classe
        extractions_por_classe = {}
        for extraction in resultado.extractions:
            classe = extraction.extraction_class
            if classe not in extractions_por_classe:
                extractions_por_classe[classe] = []
            extractions_por_classe[classe].append(extraction)
        
        # Escrever por categoria
        for classe, extractions in sorted(extractions_por_classe.items()):
            f.write(f"\n{classe.upper()}\n")
            f.write("-" * 30 + "\n")
            
            for i, extraction in enumerate(extractions, 1):
                f.write(f"\n{i}. {extraction.extraction_text}\n")
                
                if extraction.attributes:
                    for key, value in extraction.attributes.items():
                        f.write(f"   ‚Ä¢ {key}: {value}\n")
                
                if extraction.char_interval:
                    start = extraction.char_interval.start_pos
                    end = extraction.char_interval.end_pos
                    f.write(f"   ‚Ä¢ Posi√ß√£o no texto: {start}-{end}\n")
                
                f.write(f"   ‚Ä¢ Status alinhamento: {extraction.alignment_status}\n")

def exibir_resumo_extractions(resultado):
    """Exibe resumo das extra√ß√µes na tela."""
    
    print("\n" + "=" * 60)
    print("RESUMO DAS EXTRA√á√ïES")
    print("=" * 60)
    
    # Contar por classe
    classes_count = {}
    for extraction in resultado.extractions:
        classe = extraction.extraction_class
        classes_count[classe] = classes_count.get(classe, 0) + 1
    
    print(f"\nTotal de extra√ß√µes: {len(resultado.extractions)}")
    print("\nPor categoria:")
    for classe, count in sorted(classes_count.items()):
        print(f"  ‚Ä¢ {classe}: {count}")
    
    print("\n" + "-" * 60)
    print("PRIMEIRAS 10 EXTRA√á√ïES:")
    print("-" * 60)
    
    for i, extraction in enumerate(resultado.extractions[:10], 1):
        print(f"\n{i}. [{extraction.extraction_class.upper()}] {extraction.extraction_text}")
        
        if extraction.attributes:
            # Mostrar apenas os 3 primeiros atributos para n√£o poluir
            attrs_mostrar = list(extraction.attributes.items())[:3]
            for key, value in attrs_mostrar:
                print(f"   ‚Üí {key}: {value}")
            if len(extraction.attributes) > 3:
                print(f"   ‚Üí ... e mais {len(extraction.attributes) - 3} atributos")

def main():
    """Fun√ß√£o principal."""
    
    print("TESTE LANGEXTRACT COM AZURE OPENAI - PROCESSO JUR√çDICO")
    print("=" * 60)
    
    # Verificar configura√ß√£o
    required_vars = ['AZURE_OPENAI_API_KEY', 'AZURE_OPENAI_ENDPOINT']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå Vari√°veis de ambiente faltando: {', '.join(missing_vars)}")
        print("Configure no arquivo .env ou como vari√°veis de ambiente.")
        return False
    
    print("‚úÖ Configura√ß√£o Azure OpenAI encontrada")
    print(f"   Endpoint: {os.getenv('AZURE_OPENAI_ENDPOINT')}")
    
    # Carregar texto do processo
    texto_processo = carregar_texto_processo()
    if not texto_processo:
        return False
    
    # Extrair dados
    resultado = extrair_dados_processo(texto_processo)
    if not resultado:
        return False
    
    # Exibir resumo
    exibir_resumo_extractions(resultado)
    
    # Salvar resultados
    diretorio_output = "docs/examples/processos/07059645120258070012/output"
    salvar_resultados(resultado, diretorio_output)
    
    print("\n" + "=" * 60)
    print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    print("=" * 60)
    print(f"üìÅ Resultados salvos em: {diretorio_output}")
    print("üìä Arquivos gerados:")
    print("   ‚Ä¢ extractions.jsonl - Dados estruturados")
    print("   ‚Ä¢ visualizacao_processo.html - Visualiza√ß√£o interativa")
    print("   ‚Ä¢ relatorio_extractions.txt - Relat√≥rio em texto")
    
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
